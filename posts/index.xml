<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on &gt; /tmp</title>
    <link>https://jiwonaid.github.io/posts/</link>
    <description>Recent content in Posts on &gt; /tmp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sat, 09 Oct 2021 22:22:54 +0900</lastBuildDate><atom:link href="https://jiwonaid.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>리눅스커널이야기</title>
      <link>https://jiwonaid.github.io/posts/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%BB%A4%EB%84%90%EC%9D%B4%EC%95%BC%EA%B8%B0/</link>
      <pubDate>Sat, 09 Oct 2021 22:22:54 +0900</pubDate>
      
      <guid>https://jiwonaid.github.io/posts/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%BB%A4%EB%84%90%EC%9D%B4%EC%95%BC%EA%B8%B0/</guid>
      <description>Note: 본 문서는 &amp;#39;리눅스 커널 이야기 - 강진우 저&amp;#39;를 바탕으로 하며 1장 시스템 구성 정보 확인하기 strace # 명령어 정보 출력 uname -a # 커널 정보 출력 dmesg # 커널 ring buffer 메세지 출력 dmidecode -t # 하드웨어 정보 출력 lscpu cat /proc/cpuinfo # cpu 정보 출력 free -m # 메모리 정보 출력 df -h # 디스크 정보 출력 ethtool eth0 # 네트워크 카드 정보 출력 2장 top을 통해 살펴보는 프로세스 정보들 top 3장 Load Average와 시스템 부하 uptime cat /proc/loadavg vmstat cat /proc/sched_debug # 가상 메모리 정보 출력 4장 free 명령이 숨기고 있는 것들 free -m cat /proc/meminfo 5장 swap, 메모리 증설의 포인트 free -m smem -t 6장 NUMA, 메모리 관리의 새로운 세계 7장 TIME_WAIT 소켓이 서비스에 미치는 영향 netstat -napo 8장 </description>
    </item>
    
    <item>
      <title>Create a Blog with Github Pages and Actions</title>
      <link>https://jiwonaid.github.io/posts/create-blog-github/</link>
      <pubDate>Sat, 18 Sep 2021 17:16:24 +0900</pubDate>
      
      <guid>https://jiwonaid.github.io/posts/create-blog-github/</guid>
      <description>부제: 깃헙 블로그를 깃헙 액션으로 배포하는 방법 개발자는 블로그를 시작했다! 효과는 미미했다.. Note: 본 문서는 이미 깃헙 페이지로 블로그를 제작한 사람을 대상으로 합니다. 개발자라면 기술 블로그 하나쯤 있어야 하기에 열심히 정적 사이트 생성기를 고르고 나면 배포부터 귀찮아지는 당신을 위한 Github Actions 안내서
Github Actions 처음 블로그를 생성하고 배포를 여러 번 반복하다 보면 이내 자동화에 대한 욕구가 샘솟게 됩니다.
물론 가장 직관적인 방법은 휴먼 오퍼레이터나 크론잡을 사용하는 것입니다.
혹시 더 좋은 방법(무료)은 없을까에 대해 고민하다 보면 이내 배포를 위한 compute 리소스가 필요하다는 것을 알게 됩니다.</description>
    </item>
    
    <item>
      <title>Linux Kernel Dev Env Configuration</title>
      <link>https://jiwonaid.github.io/posts/linux-kernel-dev-env-conf/</link>
      <pubDate>Thu, 02 Sep 2021 22:07:46 +0900</pubDate>
      
      <guid>https://jiwonaid.github.io/posts/linux-kernel-dev-env-conf/</guid>
      <description>Host sudo apt install snapd # https://multipass.run/docs/installing-on-linux sudo snap install multipass # https://multipass.run/docs/using-libvirt sudo apt install libvirt-daemon-system sudo snap connect multipass:libvirt sudo multipass stop --all sudo multipass set local.driver=libvirt # https://multipass.run/docs/launch-command sudo multipass launch -c 12 -d 128G -m 32G -n mp # Check libvirt virsh console mp Guest vi /etc/default/grub GRUB_DEFAULT=3 GRUB_TIMEOUT_STYLE=menu GRUB_TIMEOUT=3 update-grub2 # https://kernelnewbies.org/KernelBuild apt-get install libncurses5-dev gcc make git exuberant-ctags bc libssl-dev flex bison libelf-dev git clone https://kernel.</description>
    </item>
    
    <item>
      <title>cloud-init User-Data Script Re-run</title>
      <link>https://jiwonaid.github.io/posts/cloud-init-user-data-script-re-run/</link>
      <pubDate>Thu, 05 Aug 2021 22:55:27 +0900</pubDate>
      
      <guid>https://jiwonaid.github.io/posts/cloud-init-user-data-script-re-run/</guid>
      <description>User-Data Script의 동작 방식 오픈스택 ubuntu 이미지를 기준으로 작성
1.사용자가 metadata service나 config drive에 데이터와 스크립트를 제공한다.
2.cloud-init이 VM이 오픈스택이라는 것을 discovery한다.
3.cloud-init이 지정된 metadata_urls(default: [’http://169.254.169.254’])에 접근한다.
4.cloud-init -&amp;gt; neutron-metadata-agent -&amp;gt; nova-api -&amp;gt; Meta-Data, User-Data에서 정보를 받아오고
5.이 정보는 /var/lib/cloud/instances(-&amp;gt; /var/lib/cloud/instance 심볼릭 링크)에 저장된다.
6.이중 사용자 스크립트의 경우 cloud-init의 boot stage인
 Generator Local Network Config Final  중 5번의 cloud-final.service에서 동작을 하는 구조이다.
deploy@vm-instance:~$ systemctl cat cloud-init.target # /lib/systemd/system/cloud-init.target # cloud-init target is enabled by cloud-init-generator # To disable it you can either: # a.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://jiwonaid.github.io/posts/my-first-post/</link>
      <pubDate>Thu, 22 Jul 2021 20:03:08 +0900</pubDate>
      
      <guid>https://jiwonaid.github.io/posts/my-first-post/</guid>
      <description>내 첫 게시글</description>
    </item>
    
  </channel>
</rss>
